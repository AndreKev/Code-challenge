#include <iostream>
// Problem statement
/* 
    The series of triangular number are generated by adding a series of natural number
        1, 3, 6, 10, 15, 21 ...
    exemple : 55 = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10
    and the divisors of the shown numbers are
        1   - 1
        3   - 1, 3
        6   - 1, 2, 3, 6
        10  - 1, 2, 5, 10
        15  - 1, 3, 5, 15
        21  - 1, 3, 7, 21
        28  - 1, 2, 4, 7, 14, 28
    We observe that 28 is the first triangular number with more than 5 factors.

    What is the first triangular number with more than 1000 factors ?
*/

#include <vector>
#include <map>
#include <cmath>
using namespace std;

long long triangle(long long);

int main(){
    const int MAX = 1025;
    vector<int> primes = {2};
    // the counter
    int number = 3;
    // Variables used in the process
    int element = 0;
    int index = 1;
    // Start
    for (int divisors=0; divisors<MAX; index++){
        //map<int, int> occurences;       // The map of occurences of every divisors
        element += index;
        int root = pow(element, 0.5)+1;
        // insert all the possible prime factors of the current triangle number :: element
        while(number<root){
            int i=0;
            int root_number = pow(number, 0.5)+1;
            bool is_prime = true;
            while ((primes[i]<root_number)&&is_prime){
                if (number%primes[i]==0)
                    is_prime = false;
                i++;
            }
            if (is_prime)
                primes.push_back(number);
            number += 2;
        }
        // Determining the number of divisor of the number
        divisors = 1;       // Reseting to the initial trivial number of divisors 1
        long long element_copy = element;
        for (int& fact: primes){
            int power = 0;
            while (element_copy%fact==0){
                power += 1;
                element_copy /= fact;
            }
            divisors *= (power+1);   // The number of divisors is the product of the number of occurences of each prime number+1
        }
        if (element_copy!=1) divisors *= 2;  // If the remaining integer is not 1, then the integer is prime
                                        // with one trivial occurence so we multiply by :: (1+1) = 2.
    }
    cout << "Problem 12: " << triangle(index-1) << endl;
}

long long triangle(long long index){
    return (index)*(index+1)/2;
}